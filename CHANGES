Changelog
=========

Here you can see the full list of changes between each Flask-Restless release.

.. note::

   As of version 0.6, Flask-Restless supports both pure SQLAlchemy and
   Flask-SQLAlchemy models. Before that, it supported only Elixir models.

Version 0.9.2-dev
-----------------

Not yet released.

- Fixed issue #82: added request pre- and postprocessors.


- #120: adds support for JSON-P callbacks in :http:method:`get` requests.

Version 0.9.1
-------------

Released on January 17, 2013.

- #126: fix documentation build failure due to bug in a dependency.
- #127: added "ilike" query operator.


Version 0.9.0
-------------

Released on January 16, 2013.

- Fixed issue #123: :http:method:`patch` requests to instances which do not
  exist result in a :http:statuscode:`404` response.
- Removed ability to provide a :class:`~sqlalchemy.orm.session.Session` class
  when initializing :class:`APIManager`; provide an instance of the class
  instead.
- Changes some dynamically loaded relationships used for testing and in
  examples to be many-to-one instead of the incorrect one-to-many. Versions of
  SQLAlchemy after 0.8.0b2 raise an exception when the latter is used.
- Fixed issue #117: allow adding related instances on :http:method:`patch`
  requests for one-to-one relationships.
- Fixed issue #114: fix bug where string representations of integers were
  converted to integers.
- Fixed issue #110: enable ``results_per_page`` query parameter for clients,
  and added ``max_results_per_page`` keyword argument to
  :meth:`APIManager.create_api`.
- Fixed issue #109: use `sphinxcontrib-issuetracker`_ to render links to GitHub
  issues in documentation.
- Fixed issue #105: added ability to set a list of related model instances on a
  model.
- Fixed issue #107: server responds with an error code when a
  :http:method:`patch` or :http:method:`post` request specifies a field which
  does not exist on the model.
- Fixed issue #108: dynamically loaded relationships should now be rendered
  correctly by the :func:`views._to_dict` function regardless of whether they
  are a list or a single object.

.. _sphinxcontrib-issuetracker: https://sphinxcontrib-issuetracker.readthedocs.org/en/latest

Version 0.8.0
-------------

Released on November 19, 2012.

- Fixed issue #104: added ``num_results`` key to paginated JSON responses.
- Fixed issue #94: :func:`views._to_dict` should return a single object instead
  of a list when resolving dynamically loaded many-to-one relationships.

Version 0.7.0
-------------

Released on October 9, 2012.

- Fixed issue #86 allow specifying include and exclude for related models.
- Added ``exclude_columns`` keyword argument to :meth:`APIManager.create_api`.
- Fixed issue #101: ``exclude`` in :func:`views._to_dict` function now
  correctly excludes requested fields from the returned dictionary.
- Added working ``include`` and ``exclude`` functionality to the
  :func:`views._to_dict` function.
- Fixed issue #98: :http:method:`get` requests to the function evaluation
  endpoint should not have a data payload.
- Added a ``total_pages`` mapping to the JSON response according to pull
  request #93.
- Fixed issue #91: correctly handle :http:method:`post` requests to nullable
  :class:`~sqlalchemy.DateTime` columns.
- Fixed issue #83: allow :http:method:`post` requests with one-to-one related
  instances.
- Fixed issue #79: attempted to access attribute of ``None`` in constructor of
  :class:`APIManager`.

Version 0.6
-----------

Released on June 20, 2012.

- Added ``post_form_preprocessor`` keyword argument to
  :meth:`APIManager.create_api`; see issue #74.
- Fixed issue #77: validation errors are now correctly handled on
  :http:method:`PATCH` requests.
- Added support for accessing model instances via arbitrary primary keys,
  instead of requiring an integer column named ``id``.
- Added example which uses curl as a client.
- Added support for pagination of responses.
- Fixed issue due to symbolic link from :file:`README` to :file:`README.md`
  when running ``pip bundle foobar Flask-Restless``.
- Separated API blueprint creation from registration, using
  :meth:`APIManager.create_api` and :meth:`APIManager.create_api_blueprint`.
- Added support for pure SQLAlchemy in addition to Flask-SQLAlchemy.

Version 0.5
-----------

Released on April 10, 2012.

- Dual-licensed under GNU AGPLv3+ and 3-clause BSD license.
- Added capturing of exceptions raised during field validation.
- Added :file:`examples/separate_endpoints.py`, showing how to create separate
  API endpoints for a single model.
- Added ``include_columns`` keyword argument to
  :meth:`~flask_restless.APIManager.create_api` method to allow users to
  specify which columns of the model are exposed in the API.
- Replaced Elixir with Flask-SQLAlchemy. Flask-Restless now only supports
  Flask-SQLAlchemy.

Version 0.4
-----------

Released on March 29, 2012.

- Added Python 2.5 and Python 2.6 support.
- Allow users to specify which HTTP methods for a particular API will require
  authentication and how that authentication will take place.
- Created base classes for test cases.
- Moved the ``evaluate_functions`` function out of the
  :mod:`flask_restless.search` module and corrected documentation about how
  function evaluation works.
- Added `allow_functions` keyword argument to
  :meth:`~flask_restless.APIManager.create_api`.
- Fixed bug where we weren't allowing PUT requests in
  :meth:`~flask.ext.restless.manager.APIManager.create_api`.
- Added ``collection_name`` keyword argument to
  :meth:`~flask_restless.APIManager.create_api` to allow user provided names in
  URLs.
- Added ``allow_patch_many`` keyword argument to
  :meth:`~flask_restless.APIManager.create_api` to allow enabling or disabling
  the PATCH many functionality.
- Disable the PATCH many functionality by default.

Version 0.3
-----------

Released on March 4, 2012.

- Initial release in Flask extension format.
